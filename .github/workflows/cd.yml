name: CD Pipeline

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "9.15.1"

jobs:
  changes:
    name: 检测变更
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    outputs:
      ui-components: ${{ steps.changes.outputs.ui-components }}
      admin-system: ${{ steps.changes.outputs.admin-system }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 检查文件变更
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            ui-components:
              - 'packages/ui-components/**'
            admin-system:
              - 'apps/admin-system/**'
              - 'packages/ui-components/**'

  build-and-deploy-ui-components:
    name: 构建并部署 UI 组件库
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.ui-components == 'true'
    environment: production
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 配置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 配置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖包
        run: pnpm install --frozen-lockfile

      - name: 构建 UI 组件库
        run: pnpm --filter @monorepo-project/ui-components build

      - name: 创建部署包
        run: |
          cd packages/ui-components
          tar -czf ui-components-${{ github.sha }}.tar.gz dist package.json
          mkdir -p ../../deployment-packages
          mv ui-components-${{ github.sha }}.tar.gz ../../deployment-packages/

      - name: 上传部署包
        uses: actions/upload-artifact@v4
        with:
          name: ui-components-deployment
          path: deployment-packages/ui-components-${{ github.sha }}.tar.gz
          retention-days: 30

      # 如果你有私有 npm registry，可以发布到那里
      # - name: Publish to NPM Registry
      #   if: github.ref == 'refs/heads/main'
      #   run: |
      #     cd packages/ui-components
      #     npm config set registry ${{ secrets.NPM_REGISTRY_URL }}
      #     npm config set //your-registry.com/:_authToken ${{ secrets.NPM_TOKEN }}
      #     npm publish

  build-and-deploy-admin-system:
    name: 构建并部署后台管理系统
    runs-on: ubuntu-latest
    needs: [changes, build-and-deploy-ui-components]
    if: always() && needs.changes.outputs.admin-system == 'true'
    environment: production
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 配置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 配置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖包
        run: pnpm install --frozen-lockfile

      - name: 构建后台管理系统
        run: pnpm --filter @monorepo-project/admin-system build
        env:
          NODE_ENV: production

      - name: 创建部署包
        run: |
          cd apps/admin-system
          tar -czf admin-system-${{ github.sha }}.tar.gz dist
          mkdir -p ../../deployment-packages
          mv admin-system-${{ github.sha }}.tar.gz ../../deployment-packages/

      - name: 上传部署包
        uses: actions/upload-artifact@v4
        with:
          name: admin-system-deployment
          path: deployment-packages/admin-system-${{ github.sha }}.tar.gz
          retention-days: 30

      - name: 配置SSH环境
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # 设置SSH私钥
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # 配置SSH config
          cat > ~/.ssh/config << EOF
          Host ${{ secrets.SERVER_HOST }}
              HostName ${{ secrets.SERVER_HOST }}
              User ${{ secrets.SERVER_USER }}
              Port ${{ secrets.SERVER_PORT || 22 }}
              IdentityFile ~/.ssh/deploy_key
              IdentitiesOnly yes
          EOF

          # 添加服务器主机密钥到 known_hosts
          if [[ -n "${{ secrets.KNOWN_HOSTS }}" ]]; then
            echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
            chmod 600 ~/.ssh/known_hosts
            echo "      StrictHostKeyChecking yes" >> ~/.ssh/config
          else
            # 如果没有配置 KNOWN_HOSTS，则禁用严格主机密钥检查（不推荐生产环境）
            echo "      StrictHostKeyChecking no" >> ~/.ssh/config
            echo "      UserKnownHostsFile /dev/null" >> ~/.ssh/config
            echo "      LogLevel ERROR" >> ~/.ssh/config
          fi

          chmod 600 ~/.ssh/config

          # 测试SSH连接
          echo "测试SSH连接..."
          ssh -o ConnectTimeout=10 ${{ secrets.SERVER_HOST }} "echo 'SSH连接测试成功'"

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: admin-system-deployment
          path: ./artifacts

      - name: 解压构建产物
        run: |
          cd artifacts
          tar -xzf admin-system-${{ github.sha }}.tar.gz
          ls -la

      - name: 使用SCP部署到服务器
        run: |
          # 创建部署脚本
          cat > deploy_script.sh << 'EOF'
          #!/bin/bash
          set -e

          TIMESTAMP="${{ github.sha }}"
          DEPLOY_PATH="/var/www/admin-system"

          echo "开始SCP部署流程..."
          echo "时间戳: $TIMESTAMP"
          echo "部署路径: $DEPLOY_PATH"

          # 创建版本目录
          mkdir -p "${DEPLOY_PATH}/releases/${TIMESTAMP}"

          # 移动文件到版本目录
          mv ./dist/* "${DEPLOY_PATH}/releases/${TIMESTAMP}/" 2>/dev/null || true

          # 创建软链接到当前版本
          ln -sfn "${DEPLOY_PATH}/releases/${TIMESTAMP}" "${DEPLOY_PATH}/current"

          # 重启Web服务器
          sudo systemctl reload nginx || true

          # 清理旧版本（保留最近5个）
          cd "${DEPLOY_PATH}/releases"
          ls -t | tail -n +6 | xargs rm -rf 2>/dev/null || true

          echo "✅ SCP部署完成"
          EOF

          chmod +x deploy_script.sh

          # 创建远程临时目录
          remote_temp_dir="/tmp/deploy-${{ github.sha }}"
          ssh ${{ secrets.SERVER_HOST }} "mkdir -p ${remote_temp_dir}"

          # 上传构建产物
          echo "上传构建产物..."
          scp -r artifacts/dist ${{ secrets.SERVER_HOST }}:${remote_temp_dir}/

          # 上传部署脚本
          echo "上传部署脚本..."
          scp deploy_script.sh ${{ secrets.SERVER_HOST }}:${remote_temp_dir}/

          # 执行部署
          echo "执行远程部署..."
          ssh ${{ secrets.SERVER_HOST }} "cd ${remote_temp_dir} && bash deploy_script.sh"

          # 清理远程临时文件
          echo "清理临时文件..."
          ssh ${{ secrets.SERVER_HOST }} "rm -rf ${remote_temp_dir}"

      # 备用部署方式：使用 rsync
      - name: 配置SSH known_hosts (备用方案)
        if: false # 设置为 true 来启用这种部署方式
        run: |
          mkdir -p ~/.ssh
          if [[ -n "${{ secrets.KNOWN_HOSTS }}" ]]; then
            echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
            chmod 600 ~/.ssh/known_hosts
          else
            echo "StrictHostKeyChecking no" >> ~/.ssh/config
            echo "UserKnownHostsFile /dev/null" >> ~/.ssh/config
            chmod 600 ~/.ssh/config
          fi

      - name: 使用 rsync 部署（备用方案）
        if: false # 设置为 true 来启用这种部署方式
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # 在服务器上创建临时目录
            mkdir -p /tmp/admin-system-${{ github.sha }}

      - name: 通过 rsync 同步文件（备用方案）
        if: false # 设置为 true 来启用这种部署方式
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete --rsh="ssh -o StrictHostKeyChecking=no"
          path: apps/admin-system/dist/
          remote_path: /var/www/admin-system/
          remote_host: ${{ secrets.SERVER_HOST }}
          remote_user: ${{ secrets.SERVER_USER }}
          remote_key: ${{ secrets.SERVER_SSH_KEY }}

  health-check:
    name: 健康检查
    runs-on: ubuntu-latest
    needs: [build-and-deploy-admin-system]
    if: always() && needs.build-and-deploy-admin-system.result == 'success'
    steps:
      - name: 等待部署完成
        run: sleep 30

      - name: 执行健康检查
        run: |
          # 检查应用是否正常运行
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL || 'https://your-admin-system.com' }}/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ 健康检查通过"
          else
            echo "❌ 健康检查失败，状态码: $response"
            exit 1
          fi

  notify:
    name: 部署状态通知
    runs-on: ubuntu-latest
    needs:
      [
        build-and-deploy-ui-components,
        build-and-deploy-admin-system,
        health-check,
      ]
    if: always()
    steps:
      - name: 部署成功通知
        if: needs.build-and-deploy-admin-system.result == 'success' && needs.health-check.result == 'success'
        run: |
          echo "🚀 部署成功！"
          echo "- UI 组件库: ${{ needs.build-and-deploy-ui-components.result }}"
          echo "- 后台管理系统: ${{ needs.build-and-deploy-admin-system.result }}"
          echo "- 健康检查: ${{ needs.health-check.result }}"

      - name: 部署失败通知
        if: needs.build-and-deploy-admin-system.result == 'failure' || needs.health-check.result == 'failure'
        run: |
          echo "❌ 部署失败！"
          echo "- UI 组件库: ${{ needs.build-and-deploy-ui-components.result }}"
          echo "- 后台管理系统: ${{ needs.build-and-deploy-admin-system.result }}"
          echo "- 健康检查: ${{ needs.health-check.result }}"
          exit 1

      # 可选：发送通知到 Slack、钉钉等
      # - name: Send Slack Notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
