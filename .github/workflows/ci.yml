name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "9.15.1"

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      packages_files: ${{ steps.changes.outputs.packages_files }}
      apps: ${{ steps.changes.outputs.apps }}
      apps_files: ${{ steps.changes.outputs.apps_files }}
      ui-components: ${{ steps.changes.outputs.ui-components }}
      admin-system: ${{ steps.changes.outputs.admin-system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            packages:
              - 'packages/**'
            packages_files:
              - 'packages/**'
            apps:
              - 'apps/**'
            apps_files:
              - 'apps/**'
            ui-components:
              - 'packages/ui-components/**'
            admin-system:
              - 'apps/admin-system/**'

  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.packages == 'true' || needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.packages == 'true' || needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm type-check

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.packages == 'true' || needs.changes.outputs.apps == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

  build-ui-components:
    name: Build UI Components
    runs-on: ubuntu-latest
    needs: [setup, changes, lint, type-check]
    if: needs.changes.outputs.ui-components == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build UI Components
        run: pnpm --filter @monorepo-project/ui-components build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-components-dist
          path: packages/ui-components/dist
          retention-days: 1

  build-admin-system:
    name: Build Admin System
    runs-on: ubuntu-latest
    needs: [setup, changes, lint, type-check, build-ui-components]
    if: needs.changes.outputs.admin-system == 'true' || needs.changes.outputs.ui-components == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download UI Components artifacts
        if: needs.changes.outputs.ui-components == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ui-components-dist
          path: packages/ui-components/dist

      - name: Build Admin System
        run: pnpm --filter @monorepo-project/admin-system build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: admin-system-dist
          path: apps/admin-system/dist
          retention-days: 1

  success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      [changes, lint, type-check, test, build-ui-components, build-admin-system]
    if: always()
    steps:
      - name: Check job status
        run: |
          if [ "${{ needs.lint.result }}" = "failure" ] || [ "${{ needs.type-check.result }}" = "failure" ] || [ "${{ needs.test.result }}" = "failure" ] || [ "${{ needs.build-ui-components.result }}" = "failure" ] || [ "${{ needs.build-admin-system.result }}" = "failure" ]; then
            echo "CI pipeline failed"
            exit 1
          fi
          echo "CI pipeline completed successfully"
